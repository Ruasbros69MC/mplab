.section .data
N:
    .int 6
array_A:
    .int 1, 2, 3, 4, 5, 6
array_B:
    .int 1, 2, 3, 4, 5, 6
new_array:
    .space 24  # assuming 6 integers, each 4 bytes

.section .text
.globl _start

_start:
    # Set up registers
    movl $array_A, %esi      # Source address of array A
    movl $array_B, %edi      # Source address of array B
    movl $new_array, %ebx    # Destination address of new_array
    movl N, %ecx             # Number of elements in the arrays
    movl $0, %eax            # Initialize index to 0

add_even_with_odd_loop:
    movl (%esi), %edx       # Load integer from array A into edx
    testb $1, %al           # Check if index is even
    jnz odd_index           # If odd, skip to next iteration

    movl (%edi), %ecx       # Load integer from array B into ecx
    addl %ecx, %edx         # Add integer from array B to integer from array A
    movl %edx, (%ebx)       # Store the result in new_array
    addl $4, %ebx           # Move to next position in new_array

odd_index:
    addl $4, %esi           # Move to next integer in array A
    addl $4, %edi           # Move to next integer in array B
    incl %eax               # Increment index
    loop add_even_with_odd_loop  # Loop until all elements processed

    # Display new_array
    movl $4, %eax           # System call for sys_write
    movl $1, %ebx           # File descriptor 1 (stdout)
    movl $new_array, %ecx  # Pointer to new_array
    subl $new_array, %ecx  # Calculate length of new_array
    movl $4, %edx           # Number of bytes to write (int size)
    divl %edx               # Calculate number of elements
    imull $4, %eax          # Multiply by 4 to get byte count
    addl $4, %eax           # Add 4 bytes for newline character
    int $0x80               # Call kernel

    # Exit
    movl $1, %eax           # System call for sys_exit
    xorl %ebx, %ebx         # Return 0 status
    int $0x80               # Call kernel
