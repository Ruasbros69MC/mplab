.section .data
N:
    .int 8
array:
    .int 1, 2, 3, 4, 5, 6, 7, 8
new_array:
    .space 32  # assuming 8 integers, each 4 bytes

.section .text
.globl _start

_start:
    # Set up registers
    movl $array, %esi      # Source address of array
    movl $new_array, %edi  # Destination address of new_array
    movl N, %ecx           # Number of elements in the array
    movl $0, %eax          # Initialize index to 0

add_and_increment_loop:
    movl (%esi), %edx      # Load integer from array into edx
    addl $2, %edx          # Add 2 to the integer
    testb $1, %dl          # Check if the integer is odd
    jnz odd_element        # If odd, skip to next iteration

    incl %edx              # Increment the integer by 1
    movl %edx, (%edi)      # Store the modified integer in new_array
    addl $4, %edi          # Move to next position in new_array

odd_element:
    addl $4, %esi          # Move to next integer in array
    incl %eax              # Increment index
    loop add_and_increment_loop  # Loop until all elements processed

    # Display new_array
    movl $4, %eax          # System call for sys_write
    movl $1, %ebx          # File descriptor 1 (stdout)
    movl $new_array, %ecx # Pointer to new_array
    subl $new_array, %ecx # Calculate length of new_array
    movl $4, %edx          # Number of bytes to write (int size)
    divl %edx              # Calculate number of elements
    imull $4, %eax         # Multiply by 4 to get byte count
    addl $4, %eax          # Add 4 bytes for newline character
    int $0x80              # Call kernel

    # Exit
    movl $1, %eax          # System call for sys_exit
    xorl %ebx, %ebx        # Return 0 status
    int $0x80              # Call kernel
